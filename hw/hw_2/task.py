# Таблица умножения
#
# Условие
# На вход подается число n.
#
# ● Задача
# Написать скрипт в любой парадигме, который выводит на экран таблицу умножения всех чисел от 1 до n.
# Обоснуйте выбор парадигм.
#
# ● Пример вывода:
#
# 1 * 1 = 1
# 1 * 2 = 2
# 1 * 3 = 3
# 1 * 4 = 4
# 1 * 5 = 5
# 1 * 6 = 6
# ...
# 1 * 9 = 9


def multiplication_table(num):
    START_VALUE = 1
    FINAL_VALUE = 10
    result = []

    for i in range(START_VALUE, num+1):
        for j in range(START_VALUE, FINAL_VALUE):
            result.append([f'{i} * {j} = {i*j}'])

    return result


number = int(input('Number: '))

for row in multiplication_table(number):
    print(*row)


# Использовал процедурную парадигму для составления таблицы умножения, т.к. возможно, в дальнейшем в рамках программы
# при условии её расширения данную операцию необходимо будет выполнять в разных местах и вызов функции позволить
# избежать дублирования кода. В рамках самой функции (ну, а как иначе;)) и вывода результата (т.к. и выводить то больше
# нечего в рамках задания) использована структурная парадигма.
